generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model allocatedtickets {
  allocationLogId String        @db.VarChar(36)
  ticketId        String        @db.VarChar(36)
  allocationlog   allocationlog @relation(fields: [allocationLogId], references: [allocationLogId], onDelete: Cascade, map: "allocatedtickets_ibfk_1")
  ticket          ticket        @relation(fields: [ticketId], references: [ticketId], onDelete: Cascade, map: "allocatedtickets_ibfk_2")

  @@id([allocationLogId, ticketId])
  @@index([ticketId], map: "ticketId")
}

model allocationlog {
  allocationLogId                          String             @id @db.VarChar(36)
  scheduleId                               String             @db.VarChar(36)
  distributorId                            String             @db.VarChar(36)
  allocatedBy                              String             @db.VarChar(36)
  dateAllocated                            DateTime?          @default(now()) @db.Timestamp(0)
  allocatedtickets                         allocatedtickets[]
  showschedules                            showschedules      @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade, map: "allocationlog_ibfk_1")
  users_allocationlog_distributorIdTousers users              @relation("allocationlog_distributorIdTousers", fields: [distributorId], references: [userId], map: "allocationlog_ibfk_2")
  users_allocationlog_allocatedByTousers   users              @relation("allocationlog_allocatedByTousers", fields: [allocatedBy], references: [userId], map: "allocationlog_ibfk_3")

  @@index([allocatedBy], map: "allocatedBy")
  @@index([distributorId], map: "distributorId")
  @@index([scheduleId], map: "scheduleId")
}

model department {
  departmentId String        @id @db.VarChar(36)
  name         String        @unique(map: "name_UNIQUE") @db.VarChar(100)
  trainerId    String?       @db.VarChar(36)
  users        users?        @relation(fields: [trainerId], references: [userId], onDelete: Restrict, map: "department_ibfk_1")
  distributor  distributor[]
  shows        shows[]

  @@index([trainerId], map: "trainerId")
}

model distributor {
  userId            String           @db.VarChar(36)
  distributorTypeId Int
  departmentId      String?          @db.VarChar(36)
  contactNumber     String           @db.VarChar(20)
  users             users            @relation(fields: [userId], references: [userId], map: "distributor_ibfk_1")
  distributortypes  distributortypes @relation(fields: [distributorTypeId], references: [id], onDelete: Cascade, map: "distributor_ibfk_2")
  department        department?      @relation(fields: [departmentId], references: [departmentId], onDelete: Cascade, map: "distributor_ibfk_3")

  @@id([userId, distributorTypeId])
  @@index([distributorTypeId], map: "distributor_ibfk_2")
  @@index([departmentId], map: "distributor_ibfk_3")
}

model distributortypes {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  haveCommision Boolean
  distributor   distributor[]
}

model genre {
  name                             String      @id @db.VarChar(100)
  showgenre_showgenre_genreTogenre showgenre[] @relation("showgenre_genreTogenre")
}

model notifications {
  notificationId                        String             @id @db.VarChar(36)
  senderId                              String             @db.VarChar(36)
  receiverId                            String             @db.VarChar(36)
  type                                  notifications_type
  message                               String             @db.Text
  isRead                                Boolean?           @default(false)
  sentAt                                DateTime?          @default(now()) @db.Timestamp(0)
  users_notifications_senderIdTousers   users              @relation("notifications_senderIdTousers", fields: [senderId], references: [userId], map: "notifications_ibfk_1")
  users_notifications_receiverIdTousers users              @relation("notifications_receiverIdTousers", fields: [receiverId], references: [userId], map: "notifications_ibfk_2")

  @@index([senderId], map: "notifications_ibfk_1")
  @@index([receiverId], map: "notifications_ibfk_2")
}

model remittancehistory {
  remittanceId                              String            @id @db.VarChar(36)
  scheduleId                                String            @db.VarChar(36)
  remittedBy                                String            @db.VarChar(36)
  receivedBy                                String            @db.VarChar(36)
  totalRemittance                           Decimal           @db.Decimal(10, 2)
  commission                                Decimal           @db.Decimal(10, 2)
  dateRemitted                              DateTime?         @default(now()) @db.Timestamp(0)
  remarks                                   String?           @db.Text
  showschedules                             showschedules     @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade, map: "remittancehistory_ibfk_1")
  users_remittancehistory_remittedByTousers users             @relation("remittancehistory_remittedByTousers", fields: [remittedBy], references: [userId], map: "remittancehistory_ibfk_2")
  users_remittancehistory_receivedByTousers users             @relation("remittancehistory_receivedByTousers", fields: [receivedBy], references: [userId], map: "remittancehistory_ibfk_3")
  remittedtickets                           remittedtickets[]

  @@index([remittedBy], map: "remittancehistory_ibfk_2")
  @@index([receivedBy], map: "remittancehistory_ibfk_3")
  @@index([scheduleId], map: "remittancehistory_ibfk_1_idx")
}

model remittedtickets {
  remittanceId      String            @db.VarChar(36)
  ticketId          String            @db.VarChar(36)
  remittancehistory remittancehistory @relation(fields: [remittanceId], references: [remittanceId], onDelete: Cascade, map: "remittedtickets_ibfk_1")
  ticket            ticket            @relation(fields: [ticketId], references: [ticketId], onDelete: Cascade, map: "remittedtickets_ibfk_2")

  @@id([remittanceId, ticketId])
  @@index([ticketId], map: "ticketId")
}

model reservations {
  reservationId     String               @id @db.VarChar(36)
  scheduleId        String               @db.VarChar(36)
  customerFirstName String               @db.VarChar(100)
  customerLastName  String               @db.VarChar(100)
  email             String               @db.VarChar(150)
  contactNumber     String               @db.VarChar(20)
  status            reservations_status? @default(pending)
  reservedAt        DateTime?            @default(now()) @db.Timestamp(0)
  showschedules     showschedules        @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade, map: "reservations_ibfk_1")
  reservedtickets   reservedtickets[]

  @@index([scheduleId], map: "reservations_ibkf_1_idx")
}

model seatmapmetadata {
  id       Int  @id @default(autoincrement())
  metadata Json
}

model showgenre {
  showId                       String @db.VarChar(36)
  genre                        String @db.VarChar(100)
  shows                        shows  @relation(fields: [showId], references: [showId], onDelete: Cascade, map: "showgenre_ibfk_1")
  genre_showgenre_genreTogenre genre  @relation("showgenre_genreTogenre", fields: [genre], references: [name], onDelete: Cascade, map: "showgenre_ibfk_2")

  @@id([showId, genre])
  @@index([genre], map: "showgenre_ibfk_2_idx")
}

model shows {
  showId        String          @id @db.VarChar(36)
  title         String          @db.VarChar(255)
  description   String          @db.Text
  showType      shows_showType
  departmentId  String?         @db.VarChar(36)
  createdBy     String          @db.VarChar(36)
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  isArchived    Boolean         @default(false)
  showCover     String          @db.Text
  showgenre     showgenre[]
  department    department?     @relation(fields: [departmentId], references: [departmentId], onDelete: Cascade, map: "shows_ibfk_1")
  users         users           @relation(fields: [createdBy], references: [userId], map: "shows_ibfk_2")
  showschedules showschedules[]

  @@index([departmentId], map: "shows_ibfk_1")
  @@index([createdBy], map: "shows_ibfk_2")
}

model showschedules {
  scheduleId        String                    @id @db.VarChar(36)
  showId            String                    @db.VarChar(36)
  isOpen            Boolean?                  @default(true)
  commissionFee     Decimal                   @db.Decimal(10, 2)
  isArchived        Boolean?                  @default(false)
  isRescheduled     Boolean?                  @default(false)
  seatingType       showschedules_seatingType
  ticketType        showschedules_ticketType
  contactNumber     String?                   @db.VarChar(20)
  facebookLink      String?                   @db.VarChar(255)
  femaleCount       Int?                      @default(0)
  maleCount         Int?                      @default(0)
  datetime          DateTime                  @db.DateTime(0)
  allocationlog     allocationlog[]
  remittancehistory remittancehistory[]
  reservations      reservations[]
  shows             shows                     @relation(fields: [showId], references: [showId], onDelete: Cascade, map: "showschedules_ibfk_1")
  showseats         showseats[]
  ticket            ticket[]

  @@index([showId], map: "showschedules_ibfk_1")
}

model showseats {
  scheduleId    String                @db.VarChar(36)
  seatNumber    String                @db.VarChar(10)
  seatSection   showseats_seatSection
  status        showseats_status?     @default(available)
  x             Float                 @db.Float
  y             Float                 @db.Float
  showschedules showschedules         @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade, map: "showseats_ibfk_1")

  @@id([scheduleId, seatNumber])
}

model ticket {
  ticketId           String             @id @db.VarChar(36)
  controlNumber      Int
  scheduleId         String             @db.VarChar(36)
  discountPercentage Decimal?           @db.Decimal(5, 2)
  status             ticket_status      @default(not_allocated)
  seatNumber         String?            @db.VarChar(10)
  distributorId      String?            @db.VarChar(36)
  isComplimentary    Boolean?           @default(false)
  ticketPrice        Decimal?           @db.Decimal(10, 2)
  allocatedtickets   allocatedtickets[]
  remittedtickets    remittedtickets[]
  reservedtickets    reservedtickets[]
  showschedules      showschedules      @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade, map: "ticket_ibfk_1")
  users              users?             @relation(fields: [distributorId], references: [userId], onDelete: Restrict, map: "ticket_ibfk_2")

  @@index([distributorId], map: "distributorId")
  @@index([scheduleId], map: "ticket_ibfk_1_idx")
}

model users {
  userId                                                String              @id @db.VarChar(36)
  firstName                                             String              @db.VarChar(100)
  lastName                                              String              @db.VarChar(100)
  email                                                 String              @unique(map: "email") @db.VarChar(150)
  password                                              String              @db.VarChar(255)
  createdAt                                             DateTime            @default(now()) @db.Timestamp(0)
  isArchived                                            Boolean             @default(false)
  isLocked                                              Boolean             @default(false)
  role                                                  users_role
  allocationlog_allocationlog_distributorIdTousers      allocationlog[]     @relation("allocationlog_distributorIdTousers")
  allocationlog_allocationlog_allocatedByTousers        allocationlog[]     @relation("allocationlog_allocatedByTousers")
  department                                            department[]
  distributor                                           distributor[]
  notifications_notifications_senderIdTousers           notifications[]     @relation("notifications_senderIdTousers")
  notifications_notifications_receiverIdTousers         notifications[]     @relation("notifications_receiverIdTousers")
  remittancehistory_remittancehistory_remittedByTousers remittancehistory[] @relation("remittancehistory_remittedByTousers")
  remittancehistory_remittancehistory_receivedByTousers remittancehistory[] @relation("remittancehistory_receivedByTousers")
  shows                                                 shows[]
  ticket                                                ticket[]
}

model reservedtickets {
  reservationId String       @db.VarChar(36)
  ticketId      String       @db.VarChar(36)
  reservations  reservations @relation(fields: [reservationId], references: [reservationId], onDelete: Cascade, map: "reservation")
  ticket        ticket       @relation(fields: [ticketId], references: [ticketId], onDelete: Cascade, map: "ticket")

  @@id([reservationId, ticketId])
  @@index([ticketId], map: "ticket_idx")
}

enum notifications_type {
  distributorToCCA
  reservationReminder
  general
}

enum shows_showType {
  showCase
  majorConcert
  majorProduction
}

enum showseats_status {
  reserved
  vip
  available
  sold
  complimentarySeat
}

enum ticket_status {
  remitted
  sold
  lost
  not_allocated
  allocated
}

enum reservations_status {
  pending
  verified
}

enum users_role {
  head
  trainer
  distributor
}

enum showschedules_seatingType {
  freeSeating
  controlledSeating
}

enum showschedules_ticketType {
  ticketed
  nonTicketed
}

enum showseats_seatSection {
  orchestraLeft
  orchestraRight
  orchestraMiddle
  balconyLeft
  balconyRight
  balconyMiddle
}
